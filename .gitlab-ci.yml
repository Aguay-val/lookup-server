# -*- coding: utf-8 -*-
# vim: ft=yaml
---
include:
  - project: EOLE/infra/ci-tools
    ref: stable
    file: /templates/Rules.yaml
  - project: EOLE/infra/ci-tools
    ref: stable
    file: /templates/Runners/apps.education-docker.yaml
  - project: EOLE/infra/ci-tools
    ref: stable
    file: /templates/Git.yaml
  - project: EOLE/infra/ci-tools
    ref: stable
    file: /templates/Docker.yaml
  - project: EOLE/infra/ci-tools
    ref: stable
    file: /templates/Release/Semantic-release.yaml

stages:
  - initial-checks
  - build
  - release

variables:
  STABLE_BRANCH: master
  IMAGE_NAME: lookup-server

###############################################################################
# `initial-checks` stage: `commitlint`
###############################################################################
# Override default `commitlint` stage
commitlint:
  stage: initial-checks
  extends: .git:commitlint

# Verify python code with black
python:black:
  stage: initial-checks
  image: "${PYTHON_BLACK_IMAGE}"
  variables:
    PYTHON_BLACK_IMAGE: "hub.eole.education/proxyhub/pyfound/black:latest_release"
  script:
    - black --check --diff .


###############################################################################
# `build` stage: `build-docker`
###############################################################################
# The name of the built image is define globally by `$IMAGE_NAME`
build-docker:
  extends: .build-docker-image


###############################################################################
# `release` stage: `semantic-release`, `tag *`
###############################################################################
# the `semantic-release` job is defined in `templates/Release/Semantic-Release.yaml`

# Avoid regression by merging all pre-release fixes to dev
merge-to-dev:
  stage: release
  extends: .on-release-tag
  # We use whatever image that has git
  image: 'hub.eole.education/eole/commitlint:latest'
  script:
    # Add `upstream` remote to push with `write_repository` token
    # Use `${GITLAB_TOKEN}` for write permission
    - "git remote show upstream 2> /dev/null || git remote add upstream ${CI_REPOSITORY_URL/${CI_JOB_TOKEN}/${GITLAB_TOKEN}}"
    - 'git fetch --all'
    - 'git checkout -b ${DEV_BRANCH} upstream/${DEV_BRANCH}'
    - 'git merge --no-edit ${CI_COMMIT_TAG}'
    - 'git push upstream ${DEV_BRANCH}'
    # Remove `upstream` to avoid caching `CI_JOB_TOKEN`
    - "git remote remove upstream"

## tag contribution branches with a more stable name than `git-${CI_COMMIT_SHORT_SHA}`
tag contrib branch:
  extends:
    - .tag-docker-image
    - .on-branches
  variables:
    # `feature/foo-bar_quux` â†’ `feature-foo-bar-quux`
    IMAGE_TAG: $CI_COMMIT_REF_SLUG

## dev images
tag dev:
  extends:
    - .tag-docker-image
    - .on-dev
  variables:
    IMAGE_TAG: dev

## testing images
tag testing:
  extends:
    - .tag-docker-image
    - .on-testing
  variables:
    IMAGE_TAG: testing

## stable images
# we retag the latest `testing`
.tag-stable:
  extends: .tag-docker-image
  variables:
    SOURCE_TAG: "testing"

# add the `X.Y.Z` tag
tag release:
  extends: .tag-stable

# add the `X` tag
tag major:
  extends: .tag-stable
  before_script:
    - export RELEASE_PREFIX=${RELEASE_PREFIX:-release/}
    - export RELEASE=${CI_COMMIT_TAG#${RELEASE_PREFIX}}
    - export IMAGE_TAG=${RELEASE%%.*}

# add the `X.Y` tag
tag minor:
  extends:
    - .tag-stable
  before_script:
    - export RELEASE_PREFIX=${RELEASE_PREFIX:-release/}
    - export RELEASE=${CI_COMMIT_TAG#${RELEASE_PREFIX}}
    - export IMAGE_TAG=${RELEASE%.${RELEASE##*.}}

tag stable:
  extends: .tag-stable
  variables:
    IMAGE_TAG: stable

tag latest:
  extends: .tag-stable
  variables:
    IMAGE_TAG: latest
